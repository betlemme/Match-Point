	package it.gemmed.database;

import it.gemmed.resource.PartitaSingola;
import it.gemmed.resource.Risultato;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;


/**
 * Fa l'update di una partita, richiede il passaggio del giocatore modificato al costruttore.
 * 
 */
public class UpdatePartitaSingolaDatabase {
	/**
	 * The SQL statement to be executed
	 * 
	 * Attenzione al cast !!!!
	 * Nota di Mattia: questa query mi sembra sospetta. Aggiorniamo il numero_partita quando nella
	 * clausola WHERE cerchiamo la tupla da aggiornare con numero_partita = x ? A che pro?
	 */
	private static final String STATEMENT = "UPDATE partita_singola SET numero_partita= ?, data=?, ora= ?, campo= ?, circolo= ?, sfidantea= ?, sfidanteb= ?, vittoriasfidantea= ?, torneo= ?, set1=?::risultato, set2=?::risultato, set3=?::risultato WHERE numero_partita= ? AND torneo=?";

	/**
	 * The SQL statement to be executed. 
	 * Update the result of a match.
	 * 
	 */
	private static final String STATEMENTRESULT = "UPDATE partita_singola SET vittoriasfidantea = ? WHERE numero_partita= ? AND torneo=?";

	/**
	 * The SQL statement to be executed.
	 * Update the player of a match
	 * 
	 */
	private static final String STATEMENTPLAYER = "UPDATE partita_singola SET sfidantea = ?, sfidanteb = ? WHERE numero_partita= ? AND torneo=?";

	/**
	 * The SQL statement to be executed.
	 * Update the playerA of a match
	 * 
	 */
	private static final String STATEMENTPLAYERA = "UPDATE partita_singola SET sfidantea = ? WHERE numero_partita= ? AND torneo=?";
	
	/**
	 * The SQL statement to be executed.
	 * Update the playerB of a match
	 * 
	 */
	private static final String STATEMENTPLAYERB = "UPDATE partita_singola SET sfidanteb = ? WHERE numero_partita= ? AND torneo=?";
	
	/**
	 * The SQL statement to be executed.
	 * Update the result set
	 * 
	 */
	private static final String STATEMENTSET = "UPDATE partita_singola SET set1=?::risultato, set2=?::risultato, set3=?::risultato WHERE numero_partita= ? AND torneo=?";
	
	/**
	 * The connection to the database
	 */
	private final Connection con;

	/**
	 * The match to be stored into the database
	 */
	private final PartitaSingola p;

	/**
	 * Creates a new object for storing an update match into the database.
	 * 
	 * @param con
	 *            the connection to the database.
	 * @param player
	 *            the player to be stored into the database.
	 */
	public UpdatePartitaSingolaDatabase(final Connection con, final PartitaSingola t) {
		this.con = con;
		this.p = t;
	}//UpdatePartitaSingolaDatabase

	/**
	 * Stores a update match into the database. Complete query.
	 * 
	 * @throws SQLException
	 *             if any error occurs while updating the match.
	 */
	public void updateGiocatore() throws SQLException {

		PreparedStatement pstmt = null;

		try {
			pstmt = con.prepareStatement(STATEMENT);
			pstmt.setInt(1, p.getNumeroPartita());
			pstmt.setDate(2, p.getData());
			pstmt.setTime(3, p.getOra());
			pstmt.setInt(4, p.getCampo());
			pstmt.setString(5, p.getCircolo());
			pstmt.setString(6, p.getSfidanteA());
			pstmt.setString(7, p.getSfidanteB());
			pstmt.setBoolean(8, p.isvittoriaSfidanteA());
			pstmt.setInt(9, p.getTorneo());
			pstmt.setString(10, p.getSet1().toString());
			pstmt.setString(11, p.getSet2().toString());
			pstmt.setString(12, p.getSet3().toString());
			
			pstmt.setInt(13, p.getNumeroPartita());
			pstmt.setInt(14, p.getTorneo());
			
			
			pstmt.execute();

		} finally {
			if (pstmt != null) {
				pstmt.close();
			}//if-else

			con.close();
		}//try-catch

	}//updateGiocatore
	
	
	/**
	 * Update the winner of a match.
	 * 
	 * @throws SQLException
	 *             if any error occurs while updating the match.
	 */
	public void updateVincitore() throws SQLException {

		PreparedStatement pstmt = null;

		try {
			pstmt = con.prepareStatement(STATEMENTRESULT);

			pstmt.setBoolean(1, p.isvittoriaSfidanteA());
			
			pstmt.setInt(2, p.getNumeroPartita());
			pstmt.setInt(3, p.getTorneo());
			
			
			pstmt.execute();

		} finally {
			if (pstmt != null) {
				pstmt.close();
			}//if-else

			con.close();
		}//try-catch

	}//updateVincitore
	
	/**
	 * Update the players of a match.
	 * 
	 * @throws SQLException
	 *             if any error occurs while updating the match.
	 */
	public void updateSfidante() throws SQLException {

		PreparedStatement pstmt = null;

		try {
			pstmt = con.prepareStatement(STATEMENTPLAYER);

			pstmt.setString(1, p.getSfidanteA());
			pstmt.setString(2, p.getSfidanteB());
			
			pstmt.setInt(3, p.getNumeroPartita());
			pstmt.setInt(4, p.getTorneo());
			
			
			pstmt.execute();

		} finally {
			if (pstmt != null) {
				pstmt.close();
			}//if-else

			con.close();
		}//try-catch

	}//updateSfidante
	
	
	/**
	 * Update the playerA of a match.
	 * 
	 * @throws SQLException
	 *             if any error occurs while updating the match.
	 */
	public void updateSfidanteA(String vincitore) throws SQLException {

		PreparedStatement pstmt = null;

		try {
			pstmt = con.prepareStatement(STATEMENTPLAYERA);

			pstmt.setString(1, vincitore);
			//pstmt.setString(2, p.getSfidanteB());
			
			pstmt.setInt(2, p.getNumeroPartita());
			pstmt.setInt(3, p.getTorneo());
			
			
			pstmt.execute();

		} finally {
			if (pstmt != null) {
				pstmt.close();
			}//if-else

			con.close();
		}//try-catch

	}//updateSfidanteA
	
	/**
	 * Update the playerB of a match.
	 * 
	 * @throws SQLException
	 *             if any error occurs while updating the match.
	 */
	public void updateSfidanteB(String vincitore) throws SQLException {

		PreparedStatement pstmt = null;

		try {
			pstmt = con.prepareStatement(STATEMENTPLAYERB);

			pstmt.setString(1, vincitore);
			//pstmt.setString(2, p.getSfidanteB());
			
			pstmt.setInt(2, p.getNumeroPartita());
			pstmt.setInt(3, p.getTorneo());
			
			
			pstmt.execute();

		} finally {
			if (pstmt != null) {
				pstmt.close();
			}//if-else

			con.close();
		}//try-catch

	}//updateSfidanteA

	/**
	 * Update the result set.
	 * 
	 * @throws SQLException
	 *             if any error occurs while updating the match.
	 */
	public void updateSet(Risultato set1, Risultato set2, Risultato set3) throws SQLException {

		PreparedStatement pstmt = null;

		try {
			pstmt = con.prepareStatement(STATEMENTSET);

			pstmt.setString(1, set1.toString());
			pstmt.setString(2, set2.toString());
			pstmt.setString(3, set3.toString());
			//pstmt.setString(2, p.getSfidanteB());
			
			pstmt.setInt(4, p.getNumeroPartita());
			pstmt.setInt(5, p.getTorneo());
			
			
			pstmt.execute();

		} finally {
			if (pstmt != null) {
				pstmt.close();
			}//if-else

			con.close();
		}//try-catch

	}//updateSfidanteA
	
	/**
	 * Update the result set (String version)
	 * 
	 * @throws SQLException
	 *             if any error occurs while updating the match.
	 */
	public void updateSet(String set1, String set2, String set3) throws SQLException {

		PreparedStatement pstmt = null;

		try {
			pstmt = con.prepareStatement(STATEMENTSET);

			pstmt.setString(1, set1);
			pstmt.setString(2, set2);
			pstmt.setString(3, set3);
			//pstmt.setString(2, p.getSfidanteB());
			
			pstmt.setInt(4, p.getNumeroPartita());
			pstmt.setInt(5, p.getTorneo());
			
			
			pstmt.execute();

		} finally {
			if (pstmt != null) {
				pstmt.close();
			}//if-else

			con.close();
		}//try-catch

	}//updateSfidanteA

}//UpdatePartitaSingolaDatabase