package it.gemmed.database;

import it.gemmed.resource.PartitaSingola;
import it.gemmed.resource.Torneo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class FindPartitaDatabase {
	/**
	 * Per cercare le partite tramite torneo
	 */
	private static final String STATEMENT = "SELECT * FROM partita_singola WHERE torneo=?";
	
	/**
	 * Per cercare una partita
	 */
	private static final String STATEMENT2 = "SELECT * FROM partita_singola WHERE torneo=? AND numero_partita=?";
	
	/**
	 * The connection to the database
	 */
	private final Connection con;

	/**
	 * The results of the search.
	 */
	private final List<PartitaSingola> partite;
	
	/**
	 * The results of the search.
	 */
	private PartitaSingola partita;
	
	/**
	 * The salary of the employee
	 */
	private String circolo;

	/**
	 * Creates a new object for storing an employee into the database.
	 * 
	 * @param con
	 *            the connection to the database.
	 * @param player
	 *            the player to be stored into the database.
	 */
	public FindPartitaDatabase(final Connection con) {
		this.con = con;
		this.partite = new ArrayList<PartitaSingola>();
	}
	
	/**
	 * Ricerca tutte le partite di un torneo
	 * @param torneo
	 * @return List<ParitaSingola> partite
	 * @throws SQLException
	 */
	public List<PartitaSingola> findPartite(int torneo) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
				pstmt = con.prepareStatement(STATEMENT);
				pstmt.setInt(1, torneo);
	
				rs = pstmt.executeQuery();
	
				while (rs.next()) {
					partite.add(new PartitaSingola(rs.getInt("numero_partita"), rs
							.getInt("torneo"), rs.getString("sfidantea"), rs.getString("sfidanteb")));
				}

		} finally {
			if (rs != null) {
				rs.close();
			}
			
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}
		return partite;

	}
	
	
	/**
	 * Ricerca partita by numero_partita
	 * @param numero_partita
	 * @return partita
	 * @throws SQLException
	 */
	public PartitaSingola findPartita(int torneo, int numero_partita) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
				pstmt = con.prepareStatement(STATEMENT2);
				pstmt.setInt(1, torneo);
				pstmt.setInt(2, numero_partita);
				
				rs = pstmt.executeQuery();
	
				while (rs.next()) {
					partita = new PartitaSingola(rs.getInt("numero_partita"), rs.getInt("torneo"), rs.getString("sfidantea"), rs.getString("sfidanteb"));
					partita.setvittoriaSfidanteA(rs.getBoolean("vittoriasfidantea"));
				}

		} finally {
			if (rs != null) {
				rs.close();
			}
			
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}
		return partita;

	}
	
}