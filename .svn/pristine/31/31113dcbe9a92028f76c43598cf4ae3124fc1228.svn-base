package it.gemmed.database;

import it.gemmed.resource.Torneo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;


/**
 * Creates a new player into the database. Only the not null fields are required,
 * to set the other fields use the updateplayer class.
 * 
 * @author Manuel Zulian
 * @version 0.1
 */

public class CreateTorneoDatabase {
	/**
	 * The SQL statement to be executed
	 * 
	 * Attenzione al cast !!!!
	 */
	private static final String STATEMENT = "INSERT INTO torneo (nome, data_inizio, data_fine, circolo, tipologia, convalidato) VALUES (?, ?, ?, ?, ?::tiposcontro, ?::convalida)";

	/**
	 * The connection to the database
	 */
	private final Connection con;

	/**
	 * The employee to be stored into the database
	 */
	private final Torneo torneo;

	/**
	 * Creates a new object for storing an employee into the database.
	 * 
	 * @param con
	 *            the connection to the database.
	 * @param player
	 *            the player to be stored into the database.
	 */
	public CreateTorneoDatabase(final Connection con, final Torneo t) {
		this.con = con;
		this.torneo = t;
	}

	/**
	 * Stores a new employee into the database
	 * 
	 * @throws SQLException
	 *             if any error occurs while storing the employee.
	 */
	public void createTorneo() throws SQLException {

		PreparedStatement pstmt = null;

		try {
			pstmt = con.prepareStatement(STATEMENT);
			pstmt.setString(1, torneo.getNome());
			pstmt.setDate(2, torneo.getData_inizio());
			pstmt.setDate(3, torneo.getData_fine());
			pstmt.setString(4, torneo.getCircolo());
			pstmt.setString(5, torneo.getTipologia());
			pstmt.setString(6, torneo.getConvalidato());
			


			pstmt.execute();

		} finally {
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}

	}	

}