package it.gemmed.servlet;

import it.gemmed.database.CreateIscrizioneDatabase;
import it.gemmed.database.FindPlayerDatabase;
import it.gemmed.database.FindTorneoDatabase;
import it.gemmed.resource.Circolo;
import it.gemmed.resource.Giocatore;
import it.gemmed.resource.Iscrizione;
import it.gemmed.resource.Message;
import it.gemmed.resource.Torneo;

import java.io.IOException;
import java.sql.Date;
import java.sql.SQLException;
import java.util.BitSet;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.mail.*;



@SuppressWarnings("serial")
public class IscrizioneTorneoServlet extends AbstractDatabaseServlet {

	public void doPost(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {
		
		Iscrizione i = null;
		
		// request parameters
		int torneo = 0;
		Torneo t = null;
		Giocatore g = null;
		Boolean[] disponibilita = new Boolean[24];
		String emailGiocatore;
		
		Message m;
		
		try{
			// retrieves the request parameters
			//this.log(req.getParameter("id")+" @@@@@@@@@@@@@@@@@@@@@@");
			emailGiocatore = req.getParameter("email");
			torneo = Integer.parseInt(req.getParameter("id"));
			t = new FindTorneoDatabase(DS.getConnection()).findTorneo(torneo);
			
			g = new FindPlayerDatabase(DS.getConnection()).findPlayerByEmail(emailGiocatore);
			
			for(int j = 1; j < 25 ; j++){
				if("check".equals(req.getParameter ("disponibilita"+ Integer.toString(j))))
					disponibilita[j-1] = true;
				else
					disponibilita[j-1] = false;
			}//for
			
			
			// creates a new employee from the request parameters
			i = new Iscrizione(emailGiocatore, disponibilita, torneo);

			// creates a new object for accessing the database and stores the employee
			new CreateIscrizioneDatabase(DS.getConnection(), i).createIscrizione();
			
			m = new Message("Iscrizione avvenuta");

		} catch (NumberFormatException ex) {
			m = new Message("Valore di id torneo malformato.", 
					"E100", ex.getMessage());
		} catch (SQLException ex) {
				log(ex.getMessage());
		}
		
		Email email = new SimpleEmail();
		email.setHostName("smtp.googlemail.com");
		email.setSmtpPort(465);
		email.setAuthenticator(new DefaultAuthenticator("gemmed.tennis@gmail.com", "iekohchu"));
		email.setSSLOnConnect(true);
		try {
			email.setFrom("gemmed.tennis@gmail.com");
			email.setSubject("Iscrizione a torneo "+t.getNome());
			email.setMsg("Il giocatore "+ g.getEmail() + " si è iscritto al torneo "+t.getNome());
			email.addTo();
			email.send();
		} catch (EmailException e) {
			log(e.getMessage());
		}
		
		// stores the employee and the message as a request attribute
		req.setAttribute("iscrizione", i);
		//req.setAttribute("message", m);
		
		// Send redirect perchÃ¨ sennÃ² si lamenta che non c'Ã¨ il metodo get/post
		res.sendRedirect("profiloTorneo?id="+torneo);


	}
	
	/**
	 * Creates a new employee into the database. 
	 * 
	 * @param req
	 *            the HTTP request from the client.
	 * @param res
	 *            the HTTP response from the server.
	 * 
	 * @throws ServletException
	 *             if any error occurs while executing the servlet.
	 * @throws IOException
	 *             if any error occurs in the client/server communication.
	 */
	public void doGet(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {
		
		Iscrizione i = null;
		
		// request parameters
		int torneo;
		Boolean[] disponibilita = new Boolean[24];
		String emailGiocatore;
		
		Message m;
		
		try{
			// retrieves the request parameters
			torneo = Integer.parseInt(req.getParameter("id"));
			
			
			Giocatore giocatore = (Giocatore) req.getSession().getAttribute("giocatore");
			emailGiocatore = giocatore.getEmail();
			
			
			// creates a new employee from the request parameters
			i = new Iscrizione(emailGiocatore, disponibilita, torneo);

			// creates a new object for accessing the database and stores the employee
			new CreateIscrizioneDatabase(DS.getConnection(), i).createIscrizione();
			
			m = new Message("Iscrizione avvenuta");

		} catch (NumberFormatException ex) {
			m = new Message("Cannot create the employee. Invalid input parameters: identifier, age, and salary must be integer.", 
					"E100", ex.getMessage());
		} catch (SQLException ex) {
//			if (e
//					.getSQLState()
//					.equals("23505")) {
//				m = new Message("Cannot create the employee: employee  already exists.", 
//						"E300", ex.getMessage());
//			} else {
				m = new Message("Cannot create the employee: unexpected error while accessing the database.", 
						"E200", ex.getMessage());
//			}
		}
		
		// stores the employee and the message as a request attribute
		req.setAttribute("iscrizione", i);
		req.setAttribute("message", m);
		
		// forwards the control to the createEmployeeResult JSP
		req.getRequestDispatcher("/profiloTorneo").forward(req, res);


	}
	
	

}


