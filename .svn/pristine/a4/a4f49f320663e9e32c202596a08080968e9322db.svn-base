package it.gemmed.database;

import it.gemmed.resource.Arbitro;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Creates a new player into the database. Only the not null fields are required,
 * to set the other fields use the updateplayer class.
 * 
 * @author Manuel Zulian
 * @version 0.1
 */

public class CreateArbitroDatabase {
	/**
	 * The SQL statement to be executed
	 */
	private static final String STATEMENT = "INSERT INTO arbitro (nome, cognome, data_nascita, email, password) VALUES (?, ?, ?, ?, ?)";

	/**
	 * The connection to the database
	 */
	private final Connection con;

	/**
	 * The employee to be stored into the database
	 */
	private final Arbitro arbitro;

	/**
	 * Creates a new object for storing an employee into the database.
	 * 
	 * @param con
	 *            the connection to the database.
	 * @param player
	 *            the player to be stored into the database.
	 */
	public CreateArbitroDatabase(final Connection con, final Arbitro a) {
		this.con = con;
		this.arbitro = a;
	}

	/**
	 * Stores a new employee into the database
	 * 
	 * @throws SQLException
	 *             if any error occurs while storing the employee.
	 */
	public void createArbitro() throws SQLException {

		PreparedStatement pstmt = null;

		try {
			pstmt = con.prepareStatement(STATEMENT);
			pstmt.setString(1, arbitro.getNome());
			pstmt.setString(2, arbitro.getCognome());
			pstmt.setDate(3, arbitro.getData_nascita());
			pstmt.setString(4, arbitro.getEmail());
			pstmt.setString(5, arbitro.getPassword());


			pstmt.execute();

		} finally {
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}

	}	

}