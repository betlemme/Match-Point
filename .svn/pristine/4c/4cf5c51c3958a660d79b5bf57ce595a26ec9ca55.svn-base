package it.gemmed.database;

import it.gemmed.resource.Torneo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class FindIscrizioneDatabase {

	/**
	 * Usato per ottenere una lista di tornei attivi in cui un giocatore si trova iscritto 
	 */
	private static final String SELECT_TORNEO_INCORSO = "SELECT * FROM iscrizione as I INNER JOIN (SELECT * FROM torneo WHERE convalidato = 'attivo') AS T ON I.torneo = T.id WHERE giocatore = ?";
	
	/**
	 * Usato per ottenere una lista di tornei da disputare in cui un giocatore si trova iscritto 
	 */
	private static final String SELECT_TORNEO_DADISPUTARE = "SELECT * FROM iscrizione as I INNER JOIN (SELECT * FROM torneo WHERE convalidato = 'si') AS T ON I.torneo = T.id WHERE giocatore = ?";
	
	/**
	 * Usato per ottenere una lista di tornei disponibili in cui un giocatore può iscriversi
	 */
	private static final String SELECT_TORNEO_DISPONIBILI = "SELECT * FROM torneo WHERE convalidato ='si' EXCEPT SELECT nome, data_inizio, data_fine, categoria, id, circolo, tipologia, arbitro, federazione, convalidato FROM iscrizione as I INNER JOIN (SELECT * FROM torneo WHERE convalidato = 'si') AS T ON I.torneo = T.id WHERE giocatore = ?";
    
	/**
	 * The connection to the database
	 */
	private final Connection con;

	/**
	 * The results of the search.
	 */
	private final List<Torneo> tornei;

	/**
	 * Creates a new object to find various information about the registration in a tournament for a player.
	 * 
	 * @param con
	 *            the connection to the database.
	 */
	public FindIscrizioneDatabase(final Connection con) {
		this.con = con;
		this.tornei = new ArrayList<Torneo>();
	}//FindIscrizioneDatabase
	

	/**
	 * 
	 * @param un giocatore 
	 * @return Una lista contenente i tornei attivi in cui un giocatore si trova iscritto
	 * 
	 * @throws SQLException
	 *             Errore nella ricerca del torneo
	 */
	public List<Torneo> findTorneoInCorso(String giocatore) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
				pstmt = con.prepareStatement(SELECT_TORNEO_INCORSO);
				pstmt.setString(1, giocatore);
				
				rs = pstmt.executeQuery();
				while (rs.next()) {
					tornei.add(new Torneo(rs.getString("nome"), rs
							.getDate("data_inizio"), rs.getDate("data_fine"), rs.getString("categoria"), rs.getInt("id"),
							rs.getString("circolo"), rs.getString("tipologia"), rs.getString("arbitro"), 
							rs.getString("federazione"), rs.getString("convalidato")
							));
				}//while

		} finally {
			if (rs != null) {
				rs.close();
			}//if
			
			if (pstmt != null) {
				pstmt.close();
			}//if

			con.close();
		}//try-catch
		return tornei;
	
	}//findTorneoInCorso

	/**
	 * 
	 * @param un giocatore 
	 * @return Una lista contenente i tornei da disputare in cui un giocatore si trova iscritto
	 * 
	 * @throws SQLException
	 *             Errore nella ricerca del torneo
	 */
	public List<Torneo> findTorneoDaDisputare(String giocatore) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
				pstmt = con.prepareStatement(SELECT_TORNEO_DADISPUTARE);
				pstmt.setString(1, giocatore);
				
				rs = pstmt.executeQuery();
				while (rs.next()) {
					tornei.add(new Torneo(rs.getString("nome"), rs
							.getDate("data_inizio"), rs.getDate("data_fine"), rs.getString("categoria"), rs.getInt("id"),
							rs.getString("circolo"), rs.getString("tipologia"), rs.getString("arbitro"), 
							rs.getString("federazione"), rs.getString("convalidato")
							));
				}//while

		} finally {
			if (rs != null) {
				rs.close();
			}//if
			
			if (pstmt != null) {
				pstmt.close();
			}//if

			con.close();
		}//try-catch
		return tornei;
	
	}//findTorneoDaDisputare
	
	/**
	 * 
	 * @param un giocatore 
	 * @return Una lista contenente i tornei disponibili in cui un giocatore può iscriversi
	 * 
	 * @throws SQLException
	 *             Errore nella ricerca del torneo
	 */
	public List<Torneo> findTorneoDisponibile(String giocatore) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
				pstmt = con.prepareStatement(SELECT_TORNEO_DISPONIBILI);
				pstmt.setString(1, giocatore);
				
				rs = pstmt.executeQuery();
				while (rs.next()) {
					tornei.add(new Torneo(rs.getString("nome"), rs
							.getDate("data_inizio"), rs.getDate("data_fine"), rs.getString("categoria"), rs.getInt("id"),
							rs.getString("circolo"), rs.getString("tipologia"), rs.getString("arbitro"), 
							rs.getString("federazione"), rs.getString("convalidato")
							));
				}//while

		} finally {
			if (rs != null) {
				rs.close();
			}//if
			
			if (pstmt != null) {
				pstmt.close();
			}//if

			con.close();
		}//try-catch
		return tornei;
	
	}//findTorneoDisponibile

}//FindIscrizioneDatabase
 
