package it.gemmed.database;

import it.gemmed.resource.Arbitro;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class FindArbitroDatabase {
	/**
	 * Per cercare l'arbitro tramite email
	 */
	private static final String STATEMENT_EMAIL = "SELECT * FROM arbitro WHERE email=?";
	
	/**
	 * Usato per avere la lista di tutti gli arbitri
	 */
	private static final String SELECTALL = "SELECT * FROM arbitro";

	/**
	 * The connection to the database
	 */
	private final Connection con;

	/**
	 * The results of the search.
	 */
	private final List<Arbitro> arbitri;
	
	/**
	 * The salary of the employee
	 */
	private String email;

	/**
	 * Creates a new object for storing an employee into the database.
	 * 
	 * @param con
	 *            the connection to the database.
	 * @param player
	 *            the player to be stored into the database.
	 */
	public FindArbitroDatabase(final Connection con) {
		this.con = con;
		this.arbitri = new ArrayList<Arbitro>();
	}

	/**
	 * Cerca tutti gli arbitri
	 * @param circolo Circolo a cui appartiene il torneo (ignorato se selectALL Ã¨ a true)
	 * @return Una lista con i tornei
	 * 
	 * @throws SQLException
	 *             Errore nella ricerca del torneo
	 */
	public List<Arbitro> findArbitro() throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
				pstmt = con.prepareStatement(SELECTALL);
				rs = pstmt.executeQuery();
				while (rs.next()) {
					arbitri.add(new Arbitro(rs.getString("nome"), rs.getString("cognome"), rs
							.getDate("data_nascita"), rs.getString("email"),
							rs.getString("password")));
				}

		} finally {
			if (rs != null) {
				rs.close();
			}
			
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}
		return arbitri;

	}	
	
	/**
	 * Ricerca il singolo arbitro
	 * @param circolo
	 * @return
	 * @throws SQLException
	 */
	public Arbitro findArbitro(String email) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
				pstmt = con.prepareStatement(STATEMENT_EMAIL);
				pstmt.setString(1, email);
	
				rs = pstmt.executeQuery();
	
				while (rs.next()) {
					arbitri.add(new Arbitro(rs.getString("nome"), rs.getString("cognome"), rs
							.getDate("data_nascita"), rs.getString("email"),
							rs.getString("password")));
				}

		} finally {
			if (rs != null) {
				rs.close();
			}
			
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}
		if(arbitri.size()>0)
			return arbitri.get(0);
		else
			return null;

	}	

}
