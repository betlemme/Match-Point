package it.gemmed.database;

import it.gemmed.resource.PartitaSingola;
import it.gemmed.resource.Risultato;
import it.gemmed.resource.Torneo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class FindPartitaDatabase {
	/**
	 * Query per cercare le partite di un torneo
	 */
	private static final String SELECT_PARTITATORNEO = "SELECT * FROM partita_singola WHERE torneo=? ORDER BY numero_partita ASC";
	
	/**
	 * Query per cercare i dati di una partita 
	 */
	private static final String SELECT_PARTITATORNEO2 = "SELECT * FROM partita_singola WHERE torneo=? AND numero_partita=?";
	
	/**
	 * Query per cercare tutte le partite effettuato da un giocatoreA 
	 */
	private static final String SELECT_PARTITAGIOCATOREA = "SELECT * FROM partita_singola WHERE sfidantea = ? AND vittoriasfidantea <> NULL ";
	
	/**
	 * Query per cercare tutte le partite effettuato da un giocatoreB 
	 */
	private static final String SELECT_PARTITAGIOCATOREB = "SELECT * FROM partita_singola WHERE sfidanteb = ? AND vittoriasfidantea <> NULL ";
	
	/**
	 * Query per cercare tutte le partite vinte da un giocatoreA 
	 */
	private static final String SELECT_PARTITAVGIOCATOREA = "SELECT * FROM partita_singola WHERE sfidantea = ? AND vittoriasfidantea = TRUE ";
	
	/**
	 * Query per cercare tutte le partite vinte da un giocatoreB 
	 */
	private static final String SELECT_PARTITAVGIOCATOREB = "SELECT * FROM partita_singola WHERE sfidanteb = ? AND vittoriasfidantea = FALSE ";
	
	/**
	 * ---Nota di Mattia---
	 * Non sono sicuro se psql riesca a interpretare la clausola WHERE. Da testare.
	 * Se non funzionasse, creare la query in tal modo: due risultati di select distinti uniti con 
	 * l operatore UNION.
	 * 
	 * 
	 * Query per cercare tutte le partite da disputare per un giocatore 
	 */
	private static final String SELECT_PARTITADISPUTARE = "SELECT * FROM partita_singola WHERE (sfidantea = ? AND vittoriasfidantea = NULL) OR (sfidanteb = ? AND vittoriasfidantea = NULL) ";
	
	/**
	 * The connection to the database
	 */
	private final Connection con;

	/**
	 * The results of the search.
	 */
	private final List<PartitaSingola> partite;
	
	/**
	 * The results of the search.
	 */
	private PartitaSingola partita;
	
	/**
	 * Il circolo 
	 */
	private String circolo;

	/**
	 * Creazione di un nuovo oggetto da salvare nel database.
	 * 
	 * @param con
	 *            the connection to the database.
	 * @param player
	 *            the player to be stored into the database.
	 */
	public FindPartitaDatabase(final Connection con) {
		this.con = con;
		this.partite = new ArrayList<PartitaSingola>();
	}
	
	/**
	 * Ricerca tutte le partite di un torneo
	 * @param torneo
	 * @return List<ParitaSingola> partite
	 * @throws SQLException
	 */
	public List<PartitaSingola> findPartite(int torneo) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
				pstmt = con.prepareStatement(SELECT_PARTITATORNEO);
				pstmt.setInt(1, torneo);
	
				rs = pstmt.executeQuery();
	
				while (rs.next()) {
					PartitaSingola tmp = new PartitaSingola(rs.getInt("numero_partita"), rs
							.getInt("torneo"), rs.getString("sfidantea"), rs.getString("sfidanteb"));
					Risultato set1 = Risultato.fromString(rs.getString("set1"));
					Risultato set2 = Risultato.fromString(rs.getString("set2"));
					Risultato set3 = Risultato.fromString(rs.getString("set3"));
					tmp.setSet1(set1);
					tmp.setSet2(set2);
					tmp.setSet3(set3);
					tmp.setCampo(rs.getInt("campo"));
					tmp.setCircolo(rs.getString("circolo"));
					tmp.setData(rs.getDate("data"));
					tmp.setOra(rs.getTime("ora"));
					tmp.setvittoriaSfidanteA(rs.getBoolean("vittoriasfidantea"));
					
					partite.add(tmp);
					
				}

		} finally {
			if (rs != null) {
				rs.close();
			}
			
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}
		return partite;

	}
	
	
	/**
	 * Ricerca partita by numero_partita
	 * @param numero_partita
	 * @return partita
	 * @throws SQLException
	 */
	public PartitaSingola findPartita(int torneo, int numero_partita) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
				pstmt = con.prepareStatement(SELECT_PARTITATORNEO2);
				pstmt.setInt(1, torneo);
				pstmt.setInt(2, numero_partita);
				
				rs = pstmt.executeQuery();
	
				while (rs.next()) {
					partita = new PartitaSingola(rs.getInt("numero_partita"), rs.getInt("torneo"), rs.getString("sfidantea"), rs.getString("sfidanteb"));
					partita.setvittoriaSfidanteA(rs.getBoolean("vittoriasfidantea"));
					partita.setSet1(Risultato.fromString(rs.getString("set1")));
					partita.setSet2(Risultato.fromString(rs.getString("set2")));
					partita.setSet3(Risultato.fromString(rs.getString("set3")));
					partita.setCampo(rs.getInt("campo"));
					partita.setCircolo(rs.getString("circolo"));
					partita.setData(rs.getDate("data"));
					partita.setOra(rs.getTime("ora"));
					
				}

		} finally {
			if (rs != null) {
				rs.close();
			}
			
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}
		return partita;

	}
	
	
	/**
	 * Ricerca tutte le partite disputate da un giocatoreA
	 * @param torneo
	 * @return List<ParitaSingola> partite
	 * @throws SQLException
	 */
	public List<PartitaSingola> findPartitaGiocatoreA(String giocatorea) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
				pstmt = con.prepareStatement(SELECT_PARTITAGIOCATOREA);
				pstmt.setString(1, giocatorea);
	
				rs = pstmt.executeQuery();
	
				while (rs.next()) {
					PartitaSingola tmp = new PartitaSingola(rs.getInt("numero_partita"), rs
							.getInt("torneo"), rs.getString("sfidantea"), rs.getString("sfidanteb"));
					Risultato set1 = Risultato.fromString(rs.getString("set1"));
					Risultato set2 = Risultato.fromString(rs.getString("set2"));
					Risultato set3 = Risultato.fromString(rs.getString("set3"));
					tmp.setSet1(set1);
					tmp.setSet2(set2);
					tmp.setSet3(set3);
					tmp.setSet1(set1);
					tmp.setSet2(set2);
					tmp.setSet3(set3);
					tmp.setCampo(rs.getInt("campo"));
					tmp.setCircolo(rs.getString("circolo"));
					tmp.setData(rs.getDate("data"));
					tmp.setOra(rs.getTime("ora"));
					tmp.setvittoriaSfidanteA(rs.getBoolean("vittoriasfidantea"));
					
					partite.add(tmp);
					
				}

		} finally {
			if (rs != null) {
				rs.close();
			}
			
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}
		return partite;

	}
	
	/**
	 * Ricerca tutte le partite disputate da un giocatoreB
	 * @param torneo
	 * @return List<ParitaSingola> partite
	 * @throws SQLException
	 */
	public List<PartitaSingola> findPartitaGiocatoreB(String giocatoreb) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
				pstmt = con.prepareStatement(SELECT_PARTITAGIOCATOREB);
				pstmt.setString(1, giocatoreb);
	
				rs = pstmt.executeQuery();
	
				while (rs.next()) {
					PartitaSingola tmp = new PartitaSingola(rs.getInt("numero_partita"), rs
							.getInt("torneo"), rs.getString("sfidantea"), rs.getString("sfidanteb"));
					Risultato set1 = Risultato.fromString(rs.getString("set1"));
					Risultato set2 = Risultato.fromString(rs.getString("set2"));
					Risultato set3 = Risultato.fromString(rs.getString("set3"));
					tmp.setSet1(set1);
					tmp.setSet2(set2);
					tmp.setSet3(set3);
					tmp.setSet1(set1);
					tmp.setSet2(set2);
					tmp.setSet3(set3);
					tmp.setCampo(rs.getInt("campo"));
					tmp.setCircolo(rs.getString("circolo"));
					tmp.setData(rs.getDate("data"));
					tmp.setOra(rs.getTime("ora"));
					tmp.setvittoriaSfidanteA(rs.getBoolean("vittoriasfidantea"));
					
					partite.add(tmp);
					
				}

		} finally {
			if (rs != null) {
				rs.close();
			}
			
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}
		return partite;

	}
	
	/**
	 * Ricerca tutte le partite vinte da un giocatoreA
	 * @param torneo
	 * @return List<ParitaSingola> partite
	 * @throws SQLException
	 */
	public List<PartitaSingola> findPartitaVGiocatoreA(String giocatorea) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
				pstmt = con.prepareStatement(SELECT_PARTITAVGIOCATOREA);
				pstmt.setString(1, giocatorea);
	
				rs = pstmt.executeQuery();
	
				while (rs.next()) {
					PartitaSingola tmp = new PartitaSingola(rs.getInt("numero_partita"), rs
							.getInt("torneo"), rs.getString("sfidantea"), rs.getString("sfidanteb"));
					Risultato set1 = Risultato.fromString(rs.getString("set1"));
					Risultato set2 = Risultato.fromString(rs.getString("set2"));
					Risultato set3 = Risultato.fromString(rs.getString("set3"));
					tmp.setSet1(set1);
					tmp.setSet2(set2);
					tmp.setSet3(set3);
					tmp.setSet1(set1);
					tmp.setSet2(set2);
					tmp.setSet3(set3);
					tmp.setCampo(rs.getInt("campo"));
					tmp.setCircolo(rs.getString("circolo"));
					tmp.setData(rs.getDate("data"));
					tmp.setOra(rs.getTime("ora"));
					tmp.setvittoriaSfidanteA(rs.getBoolean("vittoriasfidantea"));
					
					partite.add(tmp);
					
				}

		} finally {
			if (rs != null) {
				rs.close();
			}
			
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}
		return partite;

	}
	
	/**
	 * Ricerca tutte le partite vinte da un giocatoreB
	 * @param torneo
	 * @return List<ParitaSingola> partite
	 * @throws SQLException
	 */
	public List<PartitaSingola> findPartitaVGiocatoreB(String giocatoreb) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
				pstmt = con.prepareStatement(SELECT_PARTITAVGIOCATOREB);
				pstmt.setString(1, giocatoreb);
	
				rs = pstmt.executeQuery();
	
				while (rs.next()) {
					PartitaSingola tmp = new PartitaSingola(rs.getInt("numero_partita"), rs
							.getInt("torneo"), rs.getString("sfidantea"), rs.getString("sfidanteb"));
					Risultato set1 = Risultato.fromString(rs.getString("set1"));
					Risultato set2 = Risultato.fromString(rs.getString("set2"));
					Risultato set3 = Risultato.fromString(rs.getString("set3"));
					tmp.setSet1(set1);
					tmp.setSet2(set2);
					tmp.setSet3(set3);
					tmp.setSet1(set1);
					tmp.setSet2(set2);
					tmp.setSet3(set3);
					tmp.setCampo(rs.getInt("campo"));
					tmp.setCircolo(rs.getString("circolo"));
					tmp.setData(rs.getDate("data"));
					tmp.setOra(rs.getTime("ora"));
					tmp.setvittoriaSfidanteA(rs.getBoolean("vittoriasfidantea"));
					
					partite.add(tmp);
					
				}

		} finally {
			if (rs != null) {
				rs.close();
			}
			
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}
		return partite;

	}
	
	
	
	/**
	 * Ricerca tutte le partite che un giocatore deve disputare
	 * @param torneo
	 * @return List<ParitaSingola> partite
	 * @throws SQLException
	 */
	public List<PartitaSingola> findPartitaDisputare(String giocatoreb) throws SQLException {

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
				pstmt = con.prepareStatement(SELECT_PARTITADISPUTARE);
				pstmt.setString(1, giocatoreb);
	
				rs = pstmt.executeQuery();
	
				while (rs.next()) {
					PartitaSingola tmp = new PartitaSingola(rs.getInt("numero_partita"), rs
							.getInt("torneo"), rs.getString("sfidantea"), rs.getString("sfidanteb"));
					Risultato set1 = Risultato.fromString(rs.getString("set1"));
					Risultato set2 = Risultato.fromString(rs.getString("set2"));
					Risultato set3 = Risultato.fromString(rs.getString("set3"));
					tmp.setSet1(set1);
					tmp.setSet2(set2);
					tmp.setSet3(set3);
					tmp.setSet1(set1);
					tmp.setSet2(set2);
					tmp.setSet3(set3);
					tmp.setCampo(rs.getInt("campo"));
					tmp.setCircolo(rs.getString("circolo"));
					tmp.setData(rs.getDate("data"));
					tmp.setOra(rs.getTime("ora"));
					tmp.setvittoriaSfidanteA(rs.getBoolean("vittoriasfidantea"));
					
					partite.add(tmp);
					
				}

		} finally {
			if (rs != null) {
				rs.close();
			}
			
			if (pstmt != null) {
				pstmt.close();
			}

			con.close();
		}
		return partite;

	}
	
}